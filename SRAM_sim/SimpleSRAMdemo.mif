-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : B803;  -- 	LOADI   &B011
           001 : 9810;  -- 	OUT		SRAM_CTRL   ; 011 = no drive, no write, no read
           002 : B800;  -- 	LOADI   0
           003 : 9813;  -- 	OUT		SRAM_ADHI
           004 : 094B;  -- 	LOAD   first
           005 : 9812;  -- 	OUT		SRAM_ADLOW
           006 : B804;  -- 	LOADI   4
           007 : 9811;  -- 	OUT		SRAM_DATA
           008 : B805;  -- 	LOADI   &B101
           009 : 9810;  -- 	OUT		SRAM_CTRL   ; 101 = drive, write, no OE(no read)
           00A : B807;  -- 	LOADI   &B111
           00B : 9810;  -- 	OUT		SRAM_CTRL   ; 111 = drive, no write, no OE(no read)
           00C : B803;  -- 	LOADI	&B011
           00D : 9810;  -- 	OUT     SRAM_CTRL   ; 011 = no drive, no write, no read
           00E : 094C;  -- 	LOAD    second
           00F : 9812;  -- 	OUT		SRAM_ADLOW
           010 : B805;  -- 	LOADI   5
           011 : 9811;  -- 	OUT		SRAM_DATA
           012 : B805;  -- 	LOADI   &B101
           013 : 9810;  -- 	OUT		SRAM_CTRL   ; 101 = drive, write, no OE(no read)
           014 : B807;  -- 	LOADI   &B111
           015 : 9810;  -- 	OUT		SRAM_CTRL   ; 111 = drive, no write, no OE(no read)
           016 : B803;  -- 	LOADI	&B011
           017 : 9810;  -- 	OUT     SRAM_CTRL   ; 011 = no drive, no write, no read
           018 : 094D;  -- 	LOAD    third
           019 : 9812;  -- 	OUT		SRAM_ADLOW
           01A : B806;  -- 	LOADI   6
           01B : 9811;  -- 	OUT		SRAM_DATA
           01C : B805;  -- 	LOADI   &B101
           01D : 9810;  -- 	OUT		SRAM_CTRL   ; 101 = drive, write, no OE(no read)
           01E : B807;  -- 	LOADI   &B111
           01F : 9810;  -- 	OUT		SRAM_CTRL   ; 111 = drive, no write, no OE(no read)
           020 : B803;  -- 	LOADI	&B011
           021 : 9810;  -- 	OUT     SRAM_CTRL   ; 011 = no drive, no write, no read
           022 : 094B;  -- 	LOAD    first
           023 : 9812;  -- 	OUT 	SRAM_ADLOW
           024 : B806;  -- 	LOADI 	&B110
           025 : 9810;  -- 	OUT     SRAM_CTRL
           026 : 9011;  -- 	IN      SRAM_DATA   ; Data will be in AC after this
           027 : B803;  -- 	LOADI   &B011
           028 : 9810;  -- 	OUT     SRAM_CTRL
           029 : 094C;  -- 	LOAD    second
           02A : 9812;  -- 	OUT 	SRAM_ADLOW
           02B : B806;  -- 	LOADI 	&B110
           02C : 9810;  -- 	OUT     SRAM_CTRL
           02D : 9011;  -- 	IN      SRAM_DATA   ; Data will be in AC after this
           02E : B803;  -- 	LOADI   &B011
           02F : 9810;  -- 	OUT     SRAM_CTRL
           030 : 094D;  -- 	LOAD    third
           031 : 9812;  -- 	OUT 	SRAM_ADLOW
           032 : B806;  -- 	LOADI 	&B110
           033 : 9810;  -- 	OUT     SRAM_CTRL
           034 : 9011;  -- 	IN      SRAM_DATA   ; Data will be in AC after this
           035 : B803;  -- 	LOADI   &B011
           036 : 9810;  -- 	OUT     SRAM_CTRL
           037 : 2837;  -- 	JUMP	Done
           038 : 303B;  -- 	JNEG   M360N
           039 : 6E98;  -- 	ADDI   -360
           03A : 2838;  -- 	JUMP   Mod360
           03B : 6968;  -- 	ADDI   360
           03C : 303B;  -- 	JNEG   M360N
           03D : 8800;  -- 	RETURN
           03E : 3841;  -- 	JPOS   Abs_r
           03F : 593F;  -- 	XOR    NegOne       ; Flip all bits
           040 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           041 : 8800;  -- 	RETURN
           042 : 08A2;  -- 	LOAD   AtanY
           043 : 803E;  -- 	CALL   Abs          ; abs(y)
           044 : 10A4;  -- 	STORE  AtanT
           045 : 08A1;  -- 	LOAD   AtanX        ; abs(x)
           046 : 803E;  -- 	CALL   Abs
           047 : 20A4;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           048 : 3053;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           049 : 08A1;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           04A : 3050;  -- 	JNEG   A2_R3
           04B : 8062;  -- 	CALL   A2_calc      ; Octants 1, 8
           04C : 304E;  -- 	JNEG   A2_R1n
           04D : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           04E : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           04F : 8800;  -- 	RETURN
           050 : 8062;  -- 	CALL   A2_calc      ; Octants 4, 5            
           051 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           052 : 8800;  -- 	RETURN
           053 : 08A2;  -- 	LOAD   AtanY        ; Swap input arguments
           054 : 10A4;  -- 	STORE  AtanT
           055 : 08A1;  -- 	LOAD   AtanX
           056 : 10A2;  -- 	STORE  AtanY
           057 : 08A4;  -- 	LOAD   AtanT
           058 : 10A1;  -- 	STORE  AtanX
           059 : 385E;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           05A : 8062;  -- 	CALL   A2_calc      ; else octants 6, 7
           05B : 803F;  -- 	CALL   Neg          ; Negatge the number
           05C : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           05D : 8800;  -- 	RETURN
           05E : 8062;  -- 	CALL   A2_calc      ; Octants 2, 3
           05F : 803F;  -- 	CALL   Neg          ; negate the angle
           060 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           061 : 8800;  -- 	RETURN
           062 : 08A2;  -- 	LOAD   AtanY
           063 : 1101;  -- 	STORE  d16sN        ; Y in numerator
           064 : 08A1;  -- 	LOAD   AtanX
           065 : 1102;  -- 	STORE  d16sD        ; X in denominator
           066 : 808E;  -- 	CALL   A2_div       ; divide
           067 : 0907;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           068 : 10A3;  -- 	STORE  AtanRatio
           069 : 10CA;  -- 	STORE  m16sA
           06A : 10CB;  -- 	STORE  m16sB
           06B : 8085;  -- 	CALL   A2_mult      ; X^2
           06C : 10CA;  -- 	STORE  m16sA
           06D : 08A5;  -- 	LOAD   A2c
           06E : 10CB;  -- 	STORE  m16sB
           06F : 8085;  -- 	CALL   A2_mult
           070 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           071 : 1102;  -- 	STORE  d16sD
           072 : 08A3;  -- 	LOAD   AtanRatio
           073 : 1101;  -- 	STORE  d16sN        ; Ratio in numerator
           074 : 808E;  -- 	CALL   A2_div       ; divide
           075 : 0907;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           076 : 10CA;  -- 	STORE  m16sA        ; <= result in radians
           077 : 08A6;  -- 	LOAD   A2cd         ; degree conversion factor
           078 : 10CB;  -- 	STORE  m16sB
           079 : 8085;  -- 	CALL   A2_mult      ; convert to degrees
           07A : 10A4;  -- 	STORE  AtanT
           07B : 6017;  -- 	SHIFT  -7           ; check 7th bit
           07C : 4941;  -- 	AND    One
           07D : 4082;  -- 	JZERO  A2_rdwn      ; round down
           07E : 08A4;  -- 	LOAD   AtanT
           07F : 6018;  -- 	SHIFT  -8
           080 : 6801;  -- 	ADDI   1            ; round up
           081 : 8800;  -- 	RETURN
           082 : 08A4;  -- 	LOAD   AtanT
           083 : 6018;  -- 	SHIFT  -8           ; round down
           084 : 8800;  -- 	RETURN
           085 : 80A7;  -- 	CALL   Mult16s
           086 : 08CF;  -- 	LOAD   mres16sH
           087 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           088 : 10CF;  -- 	STORE  mres16sH
           089 : 08CE;  -- 	LOAD   mres16sL
           08A : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           08B : 4956;  -- 	AND    LowByte
           08C : 50CF;  -- 	OR     mres16sH     ; combine high and low words of result
           08D : 8800;  -- 	RETURN
           08E : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           08F : 10A4;  -- 	STORE  AtanT
           090 : 08A4;  -- 	LOAD   AtanT
           091 : 6FFF;  -- 	ADDI   -1
           092 : 3895;  -- 	JPOS   A2_DN        ; not done; continue shifting
           093 : 80D0;  -- 	CALL   Div16s       ; do the standard division
           094 : 8800;  -- 	RETURN
           095 : 10A4;  -- 	STORE  AtanT
           096 : 0901;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           097 : 6001;  -- 	SHIFT  1
           098 : 5901;  -- 	XOR    d16sN        ; if the sign changed,
           099 : 309D;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           09A : 5901;  -- 	XOR    d16sN        ; get back shifted version
           09B : 1101;  -- 	STORE  d16sN
           09C : 2890;  -- 	JUMP   A2_DL
           09D : 0902;  -- 	LOAD   d16sD
           09E : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           09F : 1102;  -- 	STORE  d16sD
           0A0 : 2890;  -- 	JUMP   A2_DL
           0A1 : 0000;  -- AtanX:      DW 0
           0A2 : 0000;  -- AtanY:      DW 0
           0A3 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           0A4 : 0000;  -- AtanT:      DW 0        ; temporary value
           0A5 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           0A6 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           0A7 : B800;  -- 	LOADI  0
           0A8 : 10CC;  -- 	STORE  m16sc        ; clear carry
           0A9 : 10CF;  -- 	STORE  mres16sH     ; clear result
           0AA : B810;  -- 	LOADI  16           ; load 16 to counter
           0AB : 10CD;  -- 	STORE  mcnt16s      
           0AC : 08CC;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           0AD : 40B1;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           0AE : 08CF;  -- 	LOAD   mres16sH     ; if a carry, 
           0AF : 18CA;  -- 	ADD    m16sA        ;  add multiplicand to result H
           0B0 : 10CF;  -- 	STORE  mres16sH
           0B1 : 08CB;  -- 	LOAD   m16sB
           0B2 : 4941;  -- 	AND    One          ; check bit 0 of multiplier
           0B3 : 10CC;  -- 	STORE  m16sc        ; save as next carry
           0B4 : 40B8;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           0B5 : 08CF;  -- 	LOAD   mres16sH     ; if bit 0 set,
           0B6 : 20CA;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           0B7 : 10CF;  -- 	STORE  mres16sH
           0B8 : 08CB;  -- 	LOAD   m16sB
           0B9 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           0BA : 48C9;  -- 	AND    c7FFF        ; clear msb
           0BB : 10CB;  -- 	STORE  m16sB
           0BC : 08CF;  -- 	LOAD   mres16sH     ; load result H
           0BD : 600F;  -- 	SHIFT  15           ; move lsb to msb
           0BE : 50CB;  -- 	OR     m16sB
           0BF : 10CB;  -- 	STORE  m16sB        ; result L now includes carry out from H
           0C0 : 08CF;  -- 	LOAD   mres16sH
           0C1 : 6011;  -- 	SHIFT  -1
           0C2 : 10CF;  -- 	STORE  mres16sH     ; shift result H >>1
           0C3 : 08CD;  -- 	LOAD   mcnt16s
           0C4 : 6FFF;  -- 	ADDI   -1           ; check counter
           0C5 : 38AB;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           0C6 : 08CB;  -- 	LOAD   m16sB
           0C7 : 10CE;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           0C8 : 8800;  -- 	RETURN              ; Done
           0C9 : 7FFF;  -- c7FFF: DW &H7FFF
           0CA : 0000;  -- m16sA: DW 0 ; multiplicand
           0CB : 0000;  -- m16sB: DW 0 ; multipler
           0CC : 0000;  -- m16sc: DW 0 ; carry
           0CD : 0000;  -- mcnt16s: DW 0 ; counter
           0CE : 0000;  -- mres16sL: DW 0 ; result low
           0CF : 0000;  -- mres16sH: DW 0 ; result high
           0D0 : B800;  -- 	LOADI  0
           0D1 : 1108;  -- 	STORE  dres16sR     ; clear remainder result
           0D2 : 1105;  -- 	STORE  d16sC1       ; clear carry
           0D3 : 0901;  -- 	LOAD   d16sN
           0D4 : 5902;  -- 	XOR    d16sD
           0D5 : 1103;  -- 	STORE  d16sS        ; sign determination = N XOR D
           0D6 : B811;  -- 	LOADI  17
           0D7 : 1104;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           0D8 : 0902;  -- 	LOAD   d16sD
           0D9 : 803E;  -- 	CALL   Abs          ; take absolute value of denominator
           0DA : 1102;  -- 	STORE  d16sD
           0DB : 0901;  -- 	LOAD   d16sN
           0DC : 803E;  -- 	CALL   Abs          ; take absolute value of numerator
           0DD : 1101;  -- 	STORE  d16sN
           0DE : 0901;  -- 	LOAD   d16sN
           0DF : 601F;  -- 	SHIFT  -15          ; get msb
           0E0 : 4941;  -- 	AND    One          ; only msb (because shift is arithmetic)
           0E1 : 1106;  -- 	STORE  d16sC2       ; store as carry
           0E2 : 0901;  -- 	LOAD   d16sN
           0E3 : 6001;  -- 	SHIFT  1            ; shift <<1
           0E4 : 5105;  -- 	OR     d16sC1       ; with carry
           0E5 : 1101;  -- 	STORE  d16sN
           0E6 : 0904;  -- 	LOAD   d16sT
           0E7 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           0E8 : 40F8;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           0E9 : 1104;  -- 	STORE  d16sT
           0EA : 0908;  -- 	LOAD   dres16sR
           0EB : 6001;  -- 	SHIFT  1            ; shift remainder
           0EC : 5106;  -- 	OR     d16sC2       ; with carry from other shift
           0ED : 2102;  -- 	SUB    d16sD        ; subtract denominator from remainder
           0EE : 30F3;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           0EF : 1108;  -- 	STORE  dres16sR
           0F0 : B801;  -- 	LOADI  1
           0F1 : 1105;  -- 	STORE  d16sC1       ; set carry
           0F2 : 28DE;  -- 	JUMP   Div16s_loop
           0F3 : 1902;  -- 	ADD    d16sD        ; add denominator back in
           0F4 : 1108;  -- 	STORE  dres16sR
           0F5 : B800;  -- 	LOADI  0
           0F6 : 1105;  -- 	STORE  d16sC1       ; clear carry
           0F7 : 28DE;  -- 	JUMP   Div16s_loop
           0F8 : 0901;  -- 	LOAD   d16sN
           0F9 : 1107;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           0FA : 0903;  -- 	LOAD   d16sS        ; check the sign indicator
           0FB : 30FD;  -- 	JNEG   Div16s_neg
           0FC : 8800;  -- 	RETURN
           0FD : 0907;  -- 	LOAD   dres16sQ     ; need to negate the result
           0FE : 803F;  -- 	CALL   Neg
           0FF : 1107;  -- 	STORE  dres16sQ
           100 : 8800;  -- 	RETURN	
           101 : 0000;  -- d16sN: DW 0 ; numerator
           102 : 0000;  -- d16sD: DW 0 ; denominator
           103 : 0000;  -- d16sS: DW 0 ; sign value
           104 : 0000;  -- d16sT: DW 0 ; temp counter
           105 : 0000;  -- d16sC1: DW 0 ; carry value
           106 : 0000;  -- d16sC2: DW 0 ; carry value
           107 : 0000;  -- dres16sQ: DW 0 ; quotient result
           108 : 0000;  -- dres16sR: DW 0 ; remainder result
           109 : 0933;  -- 	LOAD   L2X
           10A : 803E;  -- 	CALL   Abs
           10B : 1135;  -- 	STORE  L2T1
           10C : 0934;  -- 	LOAD   L2Y
           10D : 803E;  -- 	CALL   Abs
           10E : 2135;  -- 	SUB    L2T1
           10F : 312B;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           110 : 1935;  -- 	ADD    L2T1
           111 : 10CA;  -- 	STORE  m16sa
           112 : B8F6;  -- 	LOADI  246       ; max * 246
           113 : 10CB;  -- 	STORE  m16sB
           114 : 80A7;  -- 	CALL   Mult16s
           115 : 08CF;  -- 	LOAD   mres16sH
           116 : 6008;  -- 	SHIFT  8
           117 : 1136;  -- 	STORE  L2T2
           118 : 08CE;  -- 	LOAD   mres16sL
           119 : 6018;  -- 	SHIFT  -8        ; / 256
           11A : 4956;  -- 	AND    LowByte
           11B : 5136;  -- 	OR     L2T2
           11C : 1137;  -- 	STORE  L2T3
           11D : 0935;  -- 	LOAD   L2T1
           11E : 10CA;  -- 	STORE  m16sa
           11F : B868;  -- 	LOADI  104       ; min * 104
           120 : 10CB;  -- 	STORE  m16sB
           121 : 80A7;  -- 	CALL   Mult16s
           122 : 08CF;  -- 	LOAD   mres16sH
           123 : 6008;  -- 	SHIFT  8
           124 : 1136;  -- 	STORE  L2T2
           125 : 08CE;  -- 	LOAD   mres16sL
           126 : 6018;  -- 	SHIFT  -8        ; / 256
           127 : 4956;  -- 	AND    LowByte
           128 : 5136;  -- 	OR     L2T2
           129 : 1937;  -- 	ADD    L2T3     ; sum
           12A : 8800;  -- 	RETURN
           12B : 1935;  -- 	ADD    L2T1
           12C : 1136;  -- 	STORE  L2T2
           12D : 0935;  -- 	LOAD   L2T1
           12E : 1137;  -- 	STORE  L2T3
           12F : 0936;  -- 	LOAD   L2T2
           130 : 1135;  -- 	STORE  L2T1
           131 : 0937;  -- 	LOAD   L2T3
           132 : 2911;  -- 	JUMP   CalcDist
           133 : 0000;  -- L2X:  DW 0
           134 : 0000;  -- L2Y:  DW 0
           135 : 0000;  -- L2T1: DW 0
           136 : 0000;  -- L2T2: DW 0
           137 : 0000;  -- L2T3: DW 0
           138 : 9802;  -- 	OUT    TIMER
           139 : 9002;  -- 	IN     TIMER
           13A : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           13B : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           13C : 3139;  -- 	JNEG   Wloop
           13D : 8800;  -- 	RETURN
           13E : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           13F : FFFF;  -- NegOne:   DW -1
           140 : 0000;  -- Zero:     DW 0
           141 : 0001;  -- One:      DW 1
           142 : 0002;  -- Two:      DW 2
           143 : 0003;  -- Three:    DW 3
           144 : 0004;  -- Four:     DW 4
           145 : 0005;  -- Five:     DW 5
           146 : 0006;  -- Six:      DW 6
           147 : 0007;  -- Seven:    DW 7
           148 : 0008;  -- Eight:    DW 8
           149 : 0009;  -- Nine:     DW 9
           14A : 000A;  -- Ten:      DW 10
           14B : 0002;  -- first:    DW &H2
           14C : 000A;  -- second:   DW &HA
           14D : 000E;  -- third:    DW &HE
           14E : 0001;  -- Mask0:    DW &B00000001
           14F : 0002;  -- Mask1:    DW &B00000010
           150 : 0004;  -- Mask2:    DW &B00000100
           151 : 0008;  -- Mask3:    DW &B00001000
           152 : 0010;  -- Mask4:    DW &B00010000
           153 : 0020;  -- Mask5:    DW &B00100000
           154 : 0040;  -- Mask6:    DW &B01000000
           155 : 0080;  -- Mask7:    DW &B10000000
           156 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           157 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           158 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           159 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           15A : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           15B : 036F;  -- Ft3:      DW 879
           15C : 0494;  -- Ft4:      DW 1172
           15D : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           15E : 00B4;  -- Deg180:   DW 180       ; 180
           15F : 010E;  -- Deg270:   DW 270       ; 270
           160 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           161 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           162 : FF9C;  -- RSlow:    DW -100
           163 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           164 : FEA2;  -- RMid:     DW -350
           165 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           166 : FE0C;  -- RFast:    DW -500
           167 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           168 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           169 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           16A : 0000;  -- 	DW 0
  END;
